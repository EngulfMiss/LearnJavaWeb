## web概念概述
    * JavaWeb
        * 使用Java语言开发基于互联网的项目

    * 软件架构：
        1.C/S：Client/Server  客户端/服务器
            * 在用户本地有一个客户端程序，在远程有一个服务器端程序
            * 如：QQ
            * 优点：
                1.用户体验好
            * 缺点：
                1.安装，部署，维护麻烦

        2.B/S：Brower/Server  浏览器/服务器
            * 只需要一个浏览器，用户可以通过不同的网址(URL)，客户访问不同服务器的程序
            * 优点：
                1.开发，部署，维护简单
            * 缺点：
                1.如果应用过大，用户的体验可能会受到影响
                2.对硬件要求过高


##B/S架构
    * 资源分类：
        1.静态资源：
            * 使用静态网页开发技术完成开发发布的资源
            * 特点：
                * 所有用户访问，得到的结果是一样的
                * 如：文本，图片，音频，HTML,CSS,JavaScript
                * 如果用户请求的是静态资源，那么服务器会直接将静态资源发送给浏览器。浏览器
                中内置了静态资源的解析引擎
            HTML:用于搭建基础网页，展示页面内容
            CSS：用于美化页面，布局页面
            JavaScrpit：控制页面的元素，让页面有一些动态的效果




        2.动态资源：
            * 使用动态网页技术发布的资源
            * 特点：
                * 所有用户访问，得到的结果可能不一样
                * 如：jsp/servlet
                如果用户请求的是动态资源，那么服务器会执行这些动态资源，服务器会运行这些动态资源
                将动态资源转换为静态资源返回给客户端

--------------------------------------------------------------------------------------

## HTML
    1.概念：
        * Hyper Text Markup Language 超文本标记语言
        * 超文本：
            * 超文本是用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本

        * 标记语言：
            * 由标签构成的语言 <标签名称>
            * 标记语言不是编程语言

    2.快速入门
        * 语法：
            1.heml文档猴嘴名 .html 或者 .htm
            2.标签分为：
                1.围堵标签：有开始标签和结束标签。如<html></html>
                2.自闭和标签：开始标签和结束标签在一起。如<br/>

            3.标签可以嵌套：
                需要正确嵌套，不能你中有我，我中有你

            4.在开始标签中可以定义属性。属性是由键值对构成，值需要用引号(单双都可以)引起来

            5.html的标签不区分大小写，但建议小写

    3.标签学习：
        1.文件标签：构成html最基本的标签
            * html：html文档的根标签
            * head：头标签。用于指定html文档的一些属性，引入一些外部资源
            * title：标题标签
            * body：体标签
            * <!DOCTYPE html>:声明该文档为html文档


        2.文本标签：和文本有关的标签
            * 注释 <!-- -->
            * <h1> to <h6>
            * <p> : 段落标签
            * <br> : 换行
            * <hr> ： 显示一条水平线
            * <b> ：字体加粗
            * <i> ：字体斜体
            * <font> ： 字体标签
                * color：颜色
                * size：大小
                * face：字体
            * <center>

            * 属性定义：
                * color：
                    1.英文单词：red，green，blue
                    2.rgb(值1,值2,值3)
                    3.#值1值2值3

                * width:
                    1.数值：width='20' 数值的单位 默认是 px(像素)
                    2.数值% ：占比


        3.图片标签：
            * img : 展示图片
                * 属性：
                    * src ： 指定图片的位置

        4.列表标签：
            * 有序列表：
                * ol
                * li
            * 无序列表：
                * ul
                * li

        5.连接标签：
            * a:定义一个超链接
                * 属性：
                    * href ： 指定访问资源的URL(统一资源定位符)
                    * target ： 指定打开资源的方式
                        * _self:默认值，在当前页面打开
                        * _blank:在空白页打开

        6.div和span标签

        7.语义化标签
            * <header></header>
            * <footer></footer>

        8.表格标签：
            * table : 定义表格
                * width:宽度
                * border:边框
                * cellpadding:定义内容与单元格之间的距离
                * cellspacing:定义单元格之间的距离，如果指定为0，单元格之间的线会合为一条
                * bgcolor：背景颜色
                * align：对齐方式


            * tr:定义行
                * bgcolor
                * align:文本的对齐方式


            * td:定义单元格
                * colspan:合并行
                * rowspan:合并列


            * th:定义表头单元格
            * <caption>：表格标题
            * <thead>:表示表格头部的部分
            * <tbody>：表示表格的体部分
            * <tfoot>：表示表格的尾部分


-----------------------------------------------------------------------------------

        * HTML 标签 ： 表单标签

        * CSS：


##    HTML 标签 ： 表单标签
    * 表单：
        * 概念：用于采集用户输入的数据。用于和服务器进行交互
        * 使用的标签 form

    用于定义表单的，可以定义一个范围，范围代表采集用户数据的范围
        * 属性：
            * action ： 指定提交数据的URL
            * method : 指定提交方式
                * 分类：
                    get:
                        1.请求参数会在地址栏中显示
                        2.请求参数大小有限制
                        3.不太安全
                    post:
                        1.请求参数不会在地址栏中显示，会封装在请求体中
                        2.请求参数的大小没有限制
                        3.较为安全


    * 表单中的数据要想提交，必须指定其name属性


    * 表单项标签：
        * input ： 可以通过type属性，改变元素的样式
            * type属性：
                - text：文本输入框
                - password：密码
                - radio:单选框
                    * 注意：1.要想让多个单选框实现单选的效果，则多个单选框的name属性值必须一样
                            2.一般会给每一个单选框提供一个value表示提交的值
                            3.checked属性，默认勾选
                - checkbox：复选框
                    * 注意： 1.一般会给每一个单选框提供一个value表示提交的值
                             2.checked属性，默认勾选

                - file：文件选择框
                - hidden:隐藏域：用于提交一些隐藏信息
                - 按钮：
                    * submit：提交按钮，可以提交表单
                    * button:普通按钮
                    * image:图片按钮
                        src:指定图片路径



            * label :指定输入项的文字表述信息
                * 注意：
                    label的for属性一般会和input的id属性值对应。如果对应了，则点击label区域
                    会让input输入框获取焦点


        * select : 下拉列表
            子元素：option，指定列表项

        * textarea ：文本域
            * cols :指定列数 每一行写多少字符
            * rows :默认多少行



#CSS：页面美化和布局控制
    1.概念：Cascading Style Sheets  层叠样式表
        * 层叠：多个样式可以作用在同一个html元素上，同时生效

    2.好处：
        1.功能强大
        2.将内容的展示和样式控制分离
            * 降低耦合度
            * 让分工协作更容易
            * 提高开发效率

    3.CSS的使用：CSS与html结合方式
        1.内联样式
            * 在标签内使用style属性指定css代码
            * 如:<div style="color:red">Hello CSS</div>

        2.内部样式
            * 在head标签内，定义style标签，style标签的标签体内容是CSS代码
            * 如：
                <head>
                    <meta charset="UTF-8">
                    <title>内部样式</title>
                    <style>
                        div{
                            color:blue;
                        }

                    </style>
                </head>

                <div>Hello CSS</div>


        3.外部样式
            <link rel="stylesheet" href="css文件路径">


        * 注意：1，2，3种方式，css作用的范围越来越大
        * 1方式不常用，后期常用2，3


    4.css语法：
        * 格式：
            选择器{
                属性名1:属性值1;
                属性名2:属性值2;
                属性名3:属性值3;
                ...
            }

        * 选择器：筛选具有相似特征的元素
        * 注意：
            每一对属性需要使用;分开


    5.选择器
        * 分类：
            1.基本选择器
                - id选择器
                - 元素选择器
                - 类选择器

            2.扩展选择器
                通配选择符：
                *{
                   margin:0;
                   padding:0;
                }

            3.  后代选择符：
                对象a 对象b 对象c ...
                不管有多少代，作用的只有最后一个对象
                标签 标签{

                }

            4.  子代选择器
                对象a 对象b
                标签a > 标签b{

                }

            5.  群组选择符
                对象a，对象b，对象c，...
                标签a，标签b，...{

                }

            6.  指定选择器
                标签名.class名（可以多个类）
                p.redtext.news{

                }

            7.  属性选择器
                元素名称[属性名="属性值"]
                input[type='text']{
                    border:3px solid;
                }

            8.伪类选择器:选择一些元素具有的状态
                语法： 元素:状态{}
                如: <a>
                    * 状态:
                        *link:初始化的状态
                        *visited:被访问过的状态
                        *active:正在访问的状态
                        *hover:鼠标悬停的状态

    6.属性
        1.字体，文本
            * font-size:字体大小
            * color:文本颜色
            * text-align:对齐方式
            * line-height:行高

        2.背景
            * background

        3.边框
            * border : 设置边框
        4.尺寸
            * width:宽度
            * height：高度

        5.盒子模型:控制布局
            * margin:外边距
            * padding：内边距
                * 默认情况下内边距会影响整个盒子的大小


            * float:浮动
                * left
                * right


----------------------------------------------------------------------------------

#JavaScript
    * 概念：一门客户端脚本语言
        * 运行在客户端浏览器种的。每一个浏览器都有JavaScript的解析引擎
        * 脚本语言：不需要编译，直接就可以被浏览器解析执行了

    * 功能：
        * 可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果
        ，增强用户体验

    * ECMAScript：客户端脚本语言的标准
        1.基本语法
            1.与html结合方式
                1.内部JS:
                    * 定义<script>，标签体内容就是js代码

                2.外部JS：
                    * 定义<script>,通过src属性引入外部js文件

                * 注意：
                    1.<srcipt>可以定义在html页面的任何地方，但定义的位置会影响执行顺序
                    2.<script>可以定义多个

            2.注释
                1.单行注释：//注释内容
                2.多行注释：/*注释内容*/

            3.数据类型：
                1.原始数据类型
                    1.number：数字  整数/小数/NaN(not a number 一个不是数字的数字类型)
                    2.string：字符串  字符串 不区分单引号双引号
                    3.boolean：true/false
                    4.null：一个对象为空的占位符
                    5.undefined：未定义，如果一个变量没有给初始化值，则会被默认为undefined

                2.引用数据类型：对象

            4.变量
                * 变量：一小块存储数据的内存空间
                * Java语言是强类型语言，JavaScript是弱类型语言（类型）
                    * 强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。
                    只能存储固定类型的数据
                    * 弱类型：在开辟变量存储空间时，不定义空间将来存储数据的类型，可以存放
                    任意类型的数据

                * 语法：
                    * var 变量名 = 初始化值;

            5.运算符
                1.一元运算符：只有一个运算数的运算符
                    ++,--,+(正号)
                    注意，在JS中，如果运算数不是运算符所要求的类型，那么js引擎会自动的将运算
                    数进行类型转换
                    * 其他类型转number：
                        * string转number：按照字面值转换，如果字面值不是数字，则转为NaN
                        * boolean转number：true转为1，false转为0

                2.算术运算符：
                    +,-,*,/,%...
                3.赋值运算符
                    =,+=,-=...
                4.比较运算符
                    > < >= <= == ===(全等于)
                5.逻辑运算符
                    && || !
                6.三元运算符
                    ? :
                    语法：
                        * 表达式 ? 值1 : 值2
                        判断表达式的值，如果为true则取值1，false取值2



            6.流程控制语句
                1.if...else...
                2.switch
                    * 在java中，switch中可以接收的数据类型：byte short int char 枚举 String
                        * switch(变量):
                            case 值：
                            break;

                        * 在JS中，switch语句可以接收任意的数据类型

                3.while
                4.do...while
                5.for


        2.基本对象
            Function对象
            1.创建
                            * var fun = new Function(形参列表,方法体);
                            * function 方法名称(形参列表){
                                方法体
                            }
                            * var 方法名 = function(形参列表){
                                方法体
                            }

                        2.方法

                        3.属性
                            length:形参的个数

                        4.特点
                            * 方法定义时，形参的类型不用写
                            * 方法是一个对象，如果定义相同名字的方法，方法会覆盖
                            * 在JS中，方法的调用只与方法的名称有关，和参数列表无关
                            * 在方法声明中，有一个隐藏的内置对象(数组),arguments,封装所有的实际参数


                        5.调用
                            * 方法名称(实际参数列表);

            Array
            1.创建
                            * var arr = new Array(元素列表);
                            * var arr = new Array(默认长度);
                            * var arr = [元素列表];

                        2.方法
                            join():将数组中的元素按照指定的分隔符拼接为字符串
                            push():向数组的尾部添加一个或多个元素，并返回新的长度

                        3.属性
                            * length：数组的长度

                        4.特点
                            * JS中,数组元素的类型可变的
                            * JS中，数组长度可变

            Boolean

            Date
                        1.创建
                            var date = new Date();

                        2.方法
                            toLocaleString():返回当前date对象对应的本地时间字符串格式
                            getTime():获取毫秒值，返回当前时间到1970年1月1日的毫秒值差

            Math
                        1.创建：
                            * 特点：Math对象不用创建，直接使用

                        2.方法：
                            random():返回0~1之间的随机数
                            ceil(x):向上取整
                            floor(x):向下取整
                            round(x):四舍五入

                        3.属性：
                            PI


            Number

            String

            RegExp:正则表达式对象
                1.正则表达式：定义字符串的组成规则
                    1.单个字符
                        []:
                        如：[a] [ab] [a-zA-Z0-9_]
                        * 特殊符号代表特殊含义的单个字符
                        \d:单个数字字符 [0-9]
                        \w:单个单词字符 [a-zA-Z0-9_]

                    2.量词符号：
                        * ： 表示出现0次或多次
                        ? ： 表示出现0次或1次
                        + ： 出现1次或多次
                        {m,n}:表示 m <= 数量 <= n
                        m如果缺省:{,n}:最多n次
                        n如果缺省:{m,}:最少m次

                    3.开始结束符号：
                        ^：开始
                        $：结束

                - 创建
                    1.var reg = new RegExp("正则表达式");
                    2.var reg = /正则表达式/;

                - 方法
                    1.test(参数):验证指定的字符串是否符合正则表达定义的规范


            Global
                1.特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用
                2.方法：
                    - encodeURI():url编码
                    - decodeURI():url解码

                    - encodeURIComponent():url编码
                    - decodeURIComponent():url解码

                    - parseInt():将字符串转为数字
                        * 逐一判断每一个字符是否是数字，直到不是数字为止，将前面数字部分
                        转换为number

                    - isNaN() : 判断一个值是不是NaN
                        * NaN六亲不认，连自己都不认，NaN参与的==比较全部为false

                    - eval():将JavaScript字符串，转换为代码来执行


    * BOM

    * DOM:
        1.事件


## DOM简单学习
    * 功能：控制html文档的内容
    * 代码：获取页面标签(元素)对象 Element
        * document.getElementById("id值") ： 通过元素的id获取元素的值

    * 操作对象Element对象：
        1.设置属性值：
            * 明确获取的对象是哪一个？
            * 查看文档，看哪些属性可以设置

        2.修改标签体内容：
            * innerHTML


## 事件简单学习
    * 功能 ： 某些组件被执行了某些操作后，触发某些代码的执行。

    * 如何绑定事件
       1.直接在html标签上，指定事件的属性，属性值就是js代码
            1.事件：onclick 单击事件

       2.通过js获取元素对象，指定事件属性,设置一个函数


----------------------------------------------------------------------------------

# BOM：
    概念：Browser Object Model 浏览器对象模型
        * 将浏览器的各个部分封装成对象

    组成：
        * Window: 窗口对象
            2.方法
                1.与弹出框有关的方法
                    alert() 显示带有一段消息和一个确认按钮的警告框
                    confirm() 显示带有一段消息以及确认按钮和取消按钮的对话框
                    prompt() 显示可提示用户输入的对话框
                        * 返回值：获取用户输入的值

                2.与打开关闭有关的方法
                    open() 打开一个新的浏览器窗口
                        * 返回新的Window对象
                    close() 关闭浏览器窗口
                        * 谁调用我，我关谁

                3.与定时器有关的方法
                    setTimeout() 在指定的毫秒数后调用函数或计算表达式(只执行一次)
                        * 参数：
                            1.js代码或者方法对象
                            2.毫秒值

                        * 返回值：唯一标识，用于取消


                    clearTimeout() 取消由setTimeout()方法设定的timeout.
                        * 参数：某个唯一标识

                    setInterval() 按照指定的周期(以毫秒计) 来调用函数或计算表达式(循环重复)
                    clearInterval() 取消由setInterval()方法设定的timeout.


            3.属性
                1.获取其他BOM对象
                    history
                    location
                    Navigator
                    Screen


                2.获取DOM对象
                    document


            4.特点
                * Window对象不需要创建可以直接使用 window使用。window.方法名();
                * window引用可以省略。  方法名();




        * Navigator: 浏览器对象
        * Screen: 显示器屏幕对象

        * History: 历史记录对象
            1.创建(获取)：
                1.window.history
                2.history

            2.方法：
                * back() 加载history 列表中的前一个URL
                * forward() 加载history 列表的下一个URL
                * go(参数) 加载history列表中的某个具体页面
                    * 参数：
                        * 正数：前进几个历史记录
                        * 负数：后退几个历史记录


            3.属性：
                * length  返回当前窗口历史列表中的 URL 数量



        * Location: 地址栏对象
            1.创建(获取):
                1.window.location
                2.location


            2.方法：
                reload():重新加载当前页面

            3.属性
                href 设置或者返回完整的URL



----------------------------------------------------------------------------------

## DOM:
    * 概念：Document Object Model  文档对象模型
        * 将标记语言文档的各个组成部分，封装为对象，可以使用这些对象，对标记语言文档进行
        CRUD的动态操作


    W3C DOM 标准被分为 3 个不同的部分：
        * 核心 DOM - 针对任何结构化文档的标准模型
            * Document ：文档对象
            * Element ：元素对象
            * Attribute ： 属性对象
            * Text ：文本对象
            * Comment ：注释对象

            * Node ：节点对象，其他5个的父对象

        * XML DOM - 针对 XML 文档的标准模型
        * HTML DOM - 针对 HTML 文档的标准模型


    * 核心DOM模型：
        * Document：文档对象
            1.创建(获取)：在html dom模型中可以使用window对象来获取
                1.window.document
                2.document

            2.方法：
                1.获取Element对象
                    1.getElementById() : 根据id属性值获取元素对象，id属性值一般唯一
                    2.getElementsByTagName() : 根据元素名称获取元素对象们，返回值是一个数组
                    3.getElementsByClassName() : 根据Class属性值获取元素对象们，返回值是一个数组
                    4.getElementsByName() : 根据name属性值获取元素对象们，返回值是一个数组

                2.创建其他DOM对象：
                    createAttribute(name)
                    createComment()
                    createElement()
                    createTextNode()



        * Element：元素对象
            1.获取/创建：通过document来获取创建
            2.方法：
                1.removeAttribute() ： 删除属性
                2.setAttribute() ： 设置属性

        * Node：节点对象
            * 特点：所有的dom对象都可以被认为是一个节点
            * 方法：
                * CRUD dom树
                    * appendChild() : 向节点的子节点的结尾添加新的子节点
                    * removeChild() : 删除(并返回)当前节点的指定节点
                    * replaceChild(?,?) : 用新节点替换一个字节点

            * 属性；
                * parentNode 返回当前节点的父节点


    * HTML DOM
        1.标签体的设置和获取：innerHTML
        2.使用html元素对象的属性
        3.控制样式